'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResolvedStackFrame = exports.resolve = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var awaitAll = function () {
  var _ref = _asyncToGenerator(_regenerator2.default.mark(function _callee(promises) {
    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, p;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 3;
            _iterator = promises[Symbol.iterator]();

          case 5:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 17;
              break;
            }

            p = _step.value;
            _context.prev = 7;
            _context.next = 10;
            return p;

          case 10:
            _context.next = 14;
            break;

          case 12:
            _context.prev = 12;
            _context.t0 = _context['catch'](7);

          case 14:
            _iteratorNormalCompletion = true;
            _context.next = 5;
            break;

          case 17:
            _context.next = 23;
            break;

          case 19:
            _context.prev = 19;
            _context.t1 = _context['catch'](3);
            _didIteratorError = true;
            _iteratorError = _context.t1;

          case 23:
            _context.prev = 23;
            _context.prev = 24;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 26:
            _context.prev = 26;

            if (!_didIteratorError) {
              _context.next = 29;
              break;
            }

            throw _iteratorError;

          case 29:
            return _context.finish(26);

          case 30:
            return _context.finish(23);

          case 31:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[3, 19, 23, 31], [7, 12], [24,, 26, 30]]);
  }));

  return function awaitAll(_x10) {
    return _ref.apply(this, arguments);
  };
}();

var getSourceMap = function () {
  var _ref2 = _asyncToGenerator(_regenerator2.default.mark(function _callee2(file, contents) {
    var match, sm, base64, match2, index, url, obj;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            match = /\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/m.exec(contents);

            if (match && match[1]) {
              _context2.next = 3;
              break;
            }

            throw new Error('Source map not found for file: ' + file);

          case 3:
            sm = match[1].toString();

            if (!(sm.indexOf('data:') === 0)) {
              _context2.next = 15;
              break;
            }

            base64 = /^data:application\/json;([\w=:"-]+;)*base64,/;
            match2 = sm.match(base64);

            if (match2) {
              _context2.next = 9;
              break;
            }

            throw new Error('Sorry, we do not support this inline source-map encoding.');

          case 9:
            sm = sm.substring(match2[0].length);
            sm = window.atob(sm);
            sm = JSON.parse(sm);
            return _context2.abrupt('return', new _sourceMap.SourceMapConsumer(sm));

          case 15:
            index = file.lastIndexOf('/');
            url = file.substring(0, index + 1) + sm;
            _context2.next = 19;
            return fetch(url).then(function (res) {
              return res.json();
            });

          case 19:
            obj = _context2.sent;
            return _context2.abrupt('return', new _sourceMap.SourceMapConsumer(obj));

          case 21:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function getSourceMap(_x12, _x13) {
    return _ref2.apply(this, arguments);
  };
}();

var resolve = function () {
  var _ref3 = _asyncToGenerator(_regenerator2.default.mark(function _callee3(error) {
    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;

    var frames, files, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, frame, fileName, fileList, requests, _loop, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, file, sourcemaps, _loop2, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, resolved, index, _frames$index, functionName, line, column, script, oScriptArr, map, original, sourceFile, sourceLine, sourceColumn, originalSource, oSourceArr;

    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            frames = _errorStackParser2.default.parse(error);
            files = {};
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context3.prev = 5;
            _iterator2 = frames[Symbol.iterator]();

          case 7:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context3.next = 16;
              break;
            }

            frame = _step2.value;
            fileName = frame.fileName;

            if (!(fileName == null || typeof fileName !== 'string')) {
              _context3.next = 12;
              break;
            }

            return _context3.abrupt('continue', 13);

          case 12:
            files[fileName] = null;

          case 13:
            _iteratorNormalCompletion2 = true;
            _context3.next = 7;
            break;

          case 16:
            _context3.next = 22;
            break;

          case 18:
            _context3.prev = 18;
            _context3.t0 = _context3['catch'](5);
            _didIteratorError2 = true;
            _iteratorError2 = _context3.t0;

          case 22:
            _context3.prev = 22;
            _context3.prev = 23;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 25:
            _context3.prev = 25;

            if (!_didIteratorError2) {
              _context3.next = 28;
              break;
            }

            throw _iteratorError2;

          case 28:
            return _context3.finish(25);

          case 29:
            return _context3.finish(22);

          case 30:
            fileList = Object.keys(files);
            requests = [];

            _loop = function _loop(file) {
              try {
                requests.push(fetch(file).then(function (res) {
                  return res.text();
                }).then(function (text) {
                  files[file] = text;
                }).catch(function (e) {}));
              } catch (e) {}
            };

            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            _context3.prev = 36;

            for (_iterator3 = fileList[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              file = _step3.value;

              _loop(file);
            }

            _context3.next = 44;
            break;

          case 40:
            _context3.prev = 40;
            _context3.t1 = _context3['catch'](36);
            _didIteratorError3 = true;
            _iteratorError3 = _context3.t1;

          case 44:
            _context3.prev = 44;
            _context3.prev = 45;

            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }

          case 47:
            _context3.prev = 47;

            if (!_didIteratorError3) {
              _context3.next = 50;
              break;
            }

            throw _iteratorError3;

          case 50:
            return _context3.finish(47);

          case 51:
            return _context3.finish(44);

          case 52:
            _context3.next = 54;
            return awaitAll(requests);

          case 54:
            sourcemaps = {};

            requests = [];

            _loop2 = function _loop2(file) {
              requests.push(getSourceMap(file, files[file]).then(function (map) {
                sourcemaps[file] = map;
              }).catch(function (e) {}));
            };

            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            _context3.prev = 60;
            for (_iterator4 = fileList[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              file = _step4.value;

              _loop2(file);
            }

            _context3.next = 68;
            break;

          case 64:
            _context3.prev = 64;
            _context3.t2 = _context3['catch'](60);
            _didIteratorError4 = true;
            _iteratorError4 = _context3.t2;

          case 68:
            _context3.prev = 68;
            _context3.prev = 69;

            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }

          case 71:
            _context3.prev = 71;

            if (!_didIteratorError4) {
              _context3.next = 74;
              break;
            }

            throw _iteratorError4;

          case 74:
            return _context3.finish(71);

          case 75:
            return _context3.finish(68);

          case 76:
            _context3.next = 78;
            return awaitAll(requests);

          case 78:
            resolved = [];
            index = 0;

          case 80:
            if (!(index < frames.length)) {
              _context3.next = 107;
              break;
            }

            _frames$index = frames[index], functionName = _frames$index.functionName, fileName = _frames$index.fileName, line = _frames$index.lineNumber, column = _frames$index.columnNumber;

            resolved[index] = new ResolvedStackFrame(functionName, fileName, line, column);

            if (!(fileName == null || line == null || column == null)) {
              _context3.next = 85;
              break;
            }

            return _context3.abrupt('continue', 104);

          case 85:
            if (files.hasOwnProperty(fileName)) {
              _context3.next = 87;
              break;
            }

            return _context3.abrupt('continue', 104);

          case 87:
            script = files[fileName];

            if (!(script == null)) {
              _context3.next = 90;
              break;
            }

            return _context3.abrupt('continue', 104);

          case 90:
            oScriptArr = getLinesAround(line, context, script);

            resolved[index] = new ResolvedStackFrame(functionName, fileName, line, column, oScriptArr);

            if (sourcemaps.hasOwnProperty(fileName)) {
              _context3.next = 94;
              break;
            }

            return _context3.abrupt('continue', 104);

          case 94:
            map = sourcemaps[fileName];

            if (!(map == null)) {
              _context3.next = 97;
              break;
            }

            return _context3.abrupt('continue', 104);

          case 97:
            original = map.originalPositionFor({ line: line, column: column });
            sourceFile = original.source, sourceLine = original.line, sourceColumn = original.column;

            if (!(!sourceFile || !line)) {
              _context3.next = 101;
              break;
            }

            return _context3.abrupt('continue', 104);

          case 101:
            originalSource = map.sourceContentFor(sourceFile);
            oSourceArr = getLinesAround(sourceLine, context, originalSource);

            resolved[index] = new ResolvedStackFrame(functionName, fileName, line, column, oScriptArr, sourceFile, sourceLine, sourceColumn, oSourceArr);

          case 104:
            ++index;
            _context3.next = 80;
            break;

          case 107:
            return _context3.abrupt('return', resolved);

          case 108:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this, [[5, 18, 22, 30], [23,, 25, 29], [36, 40, 44, 52], [45,, 47, 51], [60, 64, 68, 76], [69,, 71, 75]]);
  }));

  return function resolve(_x15) {
    return _ref3.apply(this, arguments);
  };
}();

var _errorStackParser = require('error-stack-parser');

var _errorStackParser2 = _interopRequireDefault(_errorStackParser);

var _sourceMap = require('source-map');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ResolvedStackFrame = function ResolvedStackFrame() {
  var functionName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '(anonymous function)';
  var fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '?';
  var lineNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var columnNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var scriptLines = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  var sourceFileName = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
  var sourceLineNumber = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
  var sourceColumnNumber = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
  var sourceLines = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : [];

  _classCallCheck(this, ResolvedStackFrame);

  this.functionName = functionName;
  this.fileName = fileName;
  this.lineNumber = lineNumber;
  this.columnNumber = columnNumber;
  this.scriptLines = scriptLines;
  this.sourceFileName = sourceFileName;
  this.sourceLineNumber = sourceLineNumber;
  this.sourceColumnNumber = sourceColumnNumber;
  this.sourceLines = sourceLines;
};

function getLinesAround(line, count) {
  var lines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (typeof lines === 'string') lines = lines.split('\n');
  var result = [];
  for (var index = Math.max(0, line - 1 - count); index <= Math.min(lines.length - 1, line - 1 + count); ++index) {
    result.push({
      text: lines[index],
      line: index + 1,
      context: index !== line - 1
    });
  }
  return result;
}

exports.default = resolve;
exports.resolve = resolve;
exports.ResolvedStackFrame = ResolvedStackFrame;